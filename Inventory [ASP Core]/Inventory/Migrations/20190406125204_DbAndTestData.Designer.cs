// <auto-generated />
using System;
using Inventory.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventory.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190406125204_DbAndTestData")]
    partial class DbAndTestData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inventory.Models.Action", b =>
                {
                    b.Property<int>("actionId");

                    b.Property<string>("actionName")
                        .HasMaxLength(20);

                    b.HasKey("actionId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            actionId = 1,
                            actionName = "Create"
                        },
                        new
                        {
                            actionId = 2,
                            actionName = "Read"
                        },
                        new
                        {
                            actionId = 3,
                            actionName = "Update"
                        },
                        new
                        {
                            actionId = 4,
                            actionName = "Delete"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Action_Lang", b =>
                {
                    b.Property<int>("actionLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("actionName")
                        .HasMaxLength(20);

                    b.Property<string>("discription")
                        .HasMaxLength(250);

                    b.HasKey("actionLangId");

                    b.HasIndex("ActionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Action_Lang");

                    b.HasData(
                        new
                        {
                            actionLangId = 4,
                            ActionId = 1,
                            LanguageId = 1,
                            actionName = "إضافة"
                        },
                        new
                        {
                            actionLangId = 5,
                            ActionId = 1,
                            LanguageId = 2,
                            actionName = "Create"
                        },
                        new
                        {
                            actionLangId = 6,
                            ActionId = 1,
                            LanguageId = 3,
                            actionName = "ajouter"
                        },
                        new
                        {
                            actionLangId = 1,
                            ActionId = 2,
                            LanguageId = 1,
                            actionName = "قراءة"
                        },
                        new
                        {
                            actionLangId = 2,
                            ActionId = 2,
                            LanguageId = 2,
                            actionName = "Reading"
                        },
                        new
                        {
                            actionLangId = 3,
                            ActionId = 2,
                            LanguageId = 3,
                            actionName = "en train de lire"
                        },
                        new
                        {
                            actionLangId = 7,
                            ActionId = 3,
                            LanguageId = 1,
                            actionName = "تعديل"
                        },
                        new
                        {
                            actionLangId = 8,
                            ActionId = 3,
                            LanguageId = 2,
                            actionName = "Update"
                        },
                        new
                        {
                            actionLangId = 9,
                            ActionId = 3,
                            LanguageId = 3,
                            actionName = "Mettre à jour"
                        },
                        new
                        {
                            actionLangId = 10,
                            ActionId = 4,
                            LanguageId = 1,
                            actionName = "حذف"
                        },
                        new
                        {
                            actionLangId = 11,
                            ActionId = 4,
                            LanguageId = 2,
                            actionName = "Delete"
                        },
                        new
                        {
                            actionLangId = 12,
                            ActionId = 4,
                            LanguageId = 3,
                            actionName = "Supprimer"
                        });
                });

            modelBuilder.Entity("Inventory.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "f2f03ae7-89b3-46d6-b888-074afc67f7b1",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "e9e7acf4-8e50-47c6-b543-6f724b510b38",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Inventory.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<long>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("birthDate");

                    b.Property<string>("fullName")
                        .HasMaxLength(50);

                    b.Property<string>("idNo")
                        .HasMaxLength(14);

                    b.Property<DateTime>("joinDate");

                    b.Property<string>("pic")
                        .HasMaxLength(260);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            BranchId = 1,
                            ConcurrencyStamp = "9178dd59-2a12-409c-8db6-fe1a1059de0b",
                            Email = "some-superadmin-email@nonce.fake",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOME-SUPERADMIN-EMAIL@NONCE.FAKE",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHj68O32GAi7fWRtJU75WE8x1w0xSWWPc5a4v3JCQUj27MTpsTfty+1UA5yThYRGdQ==",
                            PhoneNumberConfirmed = false,
                            RoleId = 1L,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin",
                            birthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            joinDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            pic = "Uploads/Users/mostafa.jpg"
                        });
                });

            modelBuilder.Entity("Inventory.Models.AuditTrial", b =>
                {
                    b.Property<int>("auditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<int>("PageId");

                    b.Property<long>("UserId");

                    b.Property<DateTime>("actionDate");

                    b.Property<int>("recordId");

                    b.HasKey("auditId");

                    b.HasIndex("ActionId");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrials");
                });

            modelBuilder.Entity("Inventory.Models.Branch", b =>
                {
                    b.Property<int>("branchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("address")
                        .HasMaxLength(250);

                    b.Property<string>("branchName")
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.Property<string>("faxs")
                        .HasMaxLength(11);

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.Property<string>("mobiles")
                        .HasMaxLength(11);

                    b.Property<DateTime>("openDate");

                    b.Property<string>("phones")
                        .HasMaxLength(11);

                    b.HasKey("branchId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            branchId = 1,
                            OrganizationId = 1,
                            branchName = "MainBranch",
                            isActive = true,
                            isDeleted = false,
                            openDate = new DateTime(2019, 4, 6, 14, 52, 3, 431, DateTimeKind.Local).AddTicks(3960)
                        });
                });

            modelBuilder.Entity("Inventory.Models.Brand", b =>
                {
                    b.Property<int>("brandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("companyName")
                        .HasMaxLength(50);

                    b.Property<bool>("isDeleted");

                    b.HasKey("brandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Inventory.Models.Buy", b =>
                {
                    b.Property<int>("buyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Buy_StateId");

                    b.Property<int>("LocationId");

                    b.Property<int>("SupplierId");

                    b.Property<DateTime>("buyDate");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("docment")
                        .HasMaxLength(260);

                    b.Property<bool>("isAgel");

                    b.Property<bool>("isPercentDiscount");

                    b.Property<bool>("isPercentTax");

                    b.Property<bool>("isReturn");

                    b.Property<string>("supplierCode")
                        .HasMaxLength(50);

                    b.Property<decimal>("tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalQty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("buyId");

                    b.HasIndex("Buy_StateId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Buy");
                });

            modelBuilder.Entity("Inventory.Models.Buy_Details", b =>
                {
                    b.Property<int>("buyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyId");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isPercentDiscount");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("buyDetailsId");

                    b.HasIndex("BuyId");

                    b.HasIndex("ProductId");

                    b.ToTable("Buy_Details");
                });

            modelBuilder.Entity("Inventory.Models.Buy_State", b =>
                {
                    b.Property<int>("buyStateId");

                    b.Property<string>("cssClass")
                        .HasMaxLength(50);

                    b.Property<string>("icon")
                        .HasMaxLength(50);

                    b.Property<string>("stateName")
                        .HasMaxLength(15);

                    b.HasKey("buyStateId");

                    b.ToTable("Buy_States");

                    b.HasData(
                        new
                        {
                            buyStateId = 1,
                            cssClass = "label-success",
                            icon = "icon-stack-text",
                            stateName = "New"
                        },
                        new
                        {
                            buyStateId = 2,
                            cssClass = "label-danger",
                            icon = "icon-trash",
                            stateName = "Deleted"
                        },
                        new
                        {
                            buyStateId = 3,
                            cssClass = "label-warning",
                            icon = "icon-rotate-cw2",
                            stateName = "Refunded"
                        },
                        new
                        {
                            buyStateId = 4,
                            cssClass = "label-default",
                            icon = "icon-lock2",
                            stateName = "Initial"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Buy_State_Lang", b =>
                {
                    b.Property<int>("buyStateLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Buy_StateId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("stateName")
                        .HasMaxLength(60);

                    b.HasKey("buyStateLangId");

                    b.HasIndex("Buy_StateId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Buy_State_Langs");

                    b.HasData(
                        new
                        {
                            buyStateLangId = 1,
                            Buy_StateId = 1,
                            LanguageId = 1,
                            stateName = "جديد"
                        },
                        new
                        {
                            buyStateLangId = 2,
                            Buy_StateId = 1,
                            LanguageId = 2,
                            stateName = "New"
                        },
                        new
                        {
                            buyStateLangId = 3,
                            Buy_StateId = 1,
                            LanguageId = 3,
                            stateName = "Nouveau"
                        },
                        new
                        {
                            buyStateLangId = 4,
                            Buy_StateId = 2,
                            LanguageId = 1,
                            stateName = "تم الحذف"
                        },
                        new
                        {
                            buyStateLangId = 5,
                            Buy_StateId = 2,
                            LanguageId = 2,
                            stateName = "Deleted"
                        },
                        new
                        {
                            buyStateLangId = 6,
                            Buy_StateId = 2,
                            LanguageId = 3,
                            stateName = "Suppression terminée"
                        },
                        new
                        {
                            buyStateLangId = 7,
                            Buy_StateId = 3,
                            LanguageId = 1,
                            stateName = "فاتورة مرتجع"
                        },
                        new
                        {
                            buyStateLangId = 8,
                            Buy_StateId = 3,
                            LanguageId = 2,
                            stateName = "Refunded Invoice"
                        },
                        new
                        {
                            buyStateLangId = 9,
                            Buy_StateId = 3,
                            LanguageId = 3,
                            stateName = "Facture remboursée"
                        },
                        new
                        {
                            buyStateLangId = 10,
                            Buy_StateId = 4,
                            LanguageId = 1,
                            stateName = "بداية"
                        },
                        new
                        {
                            buyStateLangId = 11,
                            Buy_StateId = 4,
                            LanguageId = 2,
                            stateName = "initial"
                        },
                        new
                        {
                            buyStateLangId = 12,
                            Buy_StateId = 4,
                            LanguageId = 3,
                            stateName = "initiale"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName")
                        .HasMaxLength(50);

                    b.Property<string>("discription")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Inventory.Models.Customer", b =>
                {
                    b.Property<int>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountId");

                    b.Property<int>("TaxId");

                    b.Property<int>("TitleId");

                    b.Property<string>("address")
                        .HasMaxLength(250);

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<string>("companyName")
                        .HasMaxLength(50);

                    b.Property<string>("customerName")
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.Property<string>("fax")
                        .HasMaxLength(11);

                    b.Property<string>("idNo")
                        .HasMaxLength(14);

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.Property<string>("mobile")
                        .HasMaxLength(11);

                    b.Property<decimal>("openAccount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("phone")
                        .HasMaxLength(11);

                    b.Property<string>("pic")
                        .HasMaxLength(260);

                    b.HasKey("customerId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TitleId");

                    b.HasIndex("customerName", "isDeleted", "isActive");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Inventory.Models.Customer_Payment", b =>
                {
                    b.Property<int>("customerPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int>("Payment_MethodId");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.Property<DateTime>("paymentDate");

                    b.Property<decimal>("paymentValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("customerPaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Payment_MethodId");

                    b.ToTable("Customer_Payments");
                });

            modelBuilder.Entity("Inventory.Models.Discount", b =>
                {
                    b.Property<int>("discountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("discountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isDeleted");

                    b.Property<bool>("isPercent");

                    b.Property<string>("title")
                        .HasMaxLength(50);

                    b.HasKey("discountId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            discountId = 1,
                            discountValue = 0m,
                            isDeleted = false,
                            isPercent = true,
                            title = "0%"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Expenses", b =>
                {
                    b.Property<int>("expensesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<int>("Expenses_TypeId");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<DateTime>("expensesDate");

                    b.Property<bool>("isDeleted");

                    b.Property<decimal>("value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("expensesId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Expenses_TypeId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Inventory.Models.Expenses_Type", b =>
                {
                    b.Property<int>("expensesTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isDeleted");

                    b.Property<string>("type")
                        .HasMaxLength(60);

                    b.HasKey("expensesTypeId");

                    b.ToTable("Expenses_Types");
                });

            modelBuilder.Entity("Inventory.Models.Language", b =>
                {
                    b.Property<int>("languageId");

                    b.Property<string>("languageName")
                        .HasMaxLength(20);

                    b.HasKey("languageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            languageId = 1,
                            languageName = "ar"
                        },
                        new
                        {
                            languageId = 2,
                            languageName = "en-GB"
                        },
                        new
                        {
                            languageId = 3,
                            languageName = "fr"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Location", b =>
                {
                    b.Property<int>("locationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<string>("discription")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.Property<string>("locationname")
                        .HasMaxLength(50);

                    b.HasKey("locationId");

                    b.HasIndex("BranchId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            locationId = 1,
                            BranchId = 1,
                            isDeleted = false,
                            locationname = "MainBranch-A"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Location_Qty", b =>
                {
                    b.Property<int>("locationQtyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("locationQtyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId", "LocationId", "qty");

                    b.ToTable("Location_Qty");
                });

            modelBuilder.Entity("Inventory.Models.Organization", b =>
                {
                    b.Property<int>("orgId");

                    b.Property<string>("logo")
                        .HasMaxLength(260);

                    b.Property<string>("mainEmail")
                        .HasMaxLength(100);

                    b.Property<string>("orgName")
                        .HasMaxLength(50);

                    b.Property<string>("website")
                        .HasMaxLength(150);

                    b.HasKey("orgId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            orgId = 1,
                            logo = "/assets/images/shop.png",
                            mainEmail = "Organization@Organization.org",
                            orgName = "Organization",
                            website = "https://www.Organization.org"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Page", b =>
                {
                    b.Property<int>("pageId");

                    b.Property<string>("pageTitle")
                        .HasMaxLength(50);

                    b.HasKey("pageId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            pageId = 1,
                            pageTitle = "home"
                        },
                        new
                        {
                            pageId = 2,
                            pageTitle = "account"
                        },
                        new
                        {
                            pageId = 3,
                            pageTitle = "customers"
                        },
                        new
                        {
                            pageId = 4,
                            pageTitle = "products"
                        },
                        new
                        {
                            pageId = 5,
                            pageTitle = "suppliers"
                        },
                        new
                        {
                            pageId = 6,
                            pageTitle = "sell"
                        },
                        new
                        {
                            pageId = 7,
                            pageTitle = "buy"
                        },
                        new
                        {
                            pageId = 8,
                            pageTitle = "transfers"
                        },
                        new
                        {
                            pageId = 9,
                            pageTitle = "safe"
                        },
                        new
                        {
                            pageId = 10,
                            pageTitle = "expenses"
                        },
                        new
                        {
                            pageId = 11,
                            pageTitle = "settings"
                        },
                        new
                        {
                            pageId = 12,
                            pageTitle = "taswya"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Page_Lang", b =>
                {
                    b.Property<int>("pageLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<int>("PageId");

                    b.Property<string>("discription")
                        .HasMaxLength(250);

                    b.Property<string>("pageTitle")
                        .HasMaxLength(50);

                    b.HasKey("pageLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PageId");

                    b.ToTable("Page_Lang");
                });

            modelBuilder.Entity("Inventory.Models.Payment_Method", b =>
                {
                    b.Property<int>("paymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cssClass")
                        .HasMaxLength(50);

                    b.Property<string>("icon")
                        .HasMaxLength(50);

                    b.Property<string>("paymentMethod")
                        .HasMaxLength(50);

                    b.HasKey("paymentMethodId");

                    b.ToTable("Payment_Methods");

                    b.HasData(
                        new
                        {
                            paymentMethodId = 1,
                            cssClass = "label-primary",
                            icon = "icon-stack-text",
                            paymentMethod = "Cash"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Payment_Method_Lang", b =>
                {
                    b.Property<int>("paymentMethodLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<int>("Payment_MethodId");

                    b.Property<string>("paymentMethod")
                        .HasMaxLength(50);

                    b.HasKey("paymentMethodLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Payment_MethodId");

                    b.ToTable("Payment_Method_Langs");

                    b.HasData(
                        new
                        {
                            paymentMethodLangId = 1,
                            LanguageId = 1,
                            Payment_MethodId = 1,
                            paymentMethod = "كاش"
                        },
                        new
                        {
                            paymentMethodLangId = 2,
                            LanguageId = 2,
                            Payment_MethodId = 1,
                            paymentMethod = "Cash"
                        },
                        new
                        {
                            paymentMethodLangId = 3,
                            LanguageId = 3,
                            Payment_MethodId = 1,
                            paymentMethod = "en espèces"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("barcode")
                        .HasMaxLength(25);

                    b.Property<string>("code")
                        .HasMaxLength(25);

                    b.Property<string>("discription")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("expiryDate");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.Property<string>("pic")
                        .HasMaxLength(260);

                    b.Property<string>("pic2")
                        .HasMaxLength(260);

                    b.Property<string>("pic3")
                        .HasMaxLength(260);

                    b.Property<string>("pic4")
                        .HasMaxLength(260);

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("productName")
                        .HasMaxLength(50);

                    b.HasKey("productId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("productName", "BrandId", "isDeleted", "isActive", "barcode", "code");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Inventory.Models.Role_Action", b =>
                {
                    b.Property<int>("roleActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<int>("PageId");

                    b.Property<long>("RoleId");

                    b.Property<bool>("isAllow");

                    b.HasKey("roleActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Action");
                });

            modelBuilder.Entity("Inventory.Models.Safe", b =>
                {
                    b.Property<int>("safeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.Property<string>("safeName")
                        .HasMaxLength(50);

                    b.HasKey("safeId");

                    b.HasIndex("BranchId");

                    b.ToTable("Safe");
                });

            modelBuilder.Entity("Inventory.Models.Safe_Trans", b =>
                {
                    b.Property<int>("safeTransId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SafeId");

                    b.Property<int>("Trans_TypeId");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.Property<DateTime>("transDate");

                    b.Property<decimal>("value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("safeTransId");

                    b.HasIndex("SafeId");

                    b.HasIndex("Trans_TypeId");

                    b.ToTable("Safe_Trans");
                });

            modelBuilder.Entity("Inventory.Models.Sell", b =>
                {
                    b.Property<int>("sellId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int>("LocationId");

                    b.Property<int>("Sell_StateId");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("docment")
                        .HasMaxLength(260);

                    b.Property<bool>("isAgel");

                    b.Property<bool>("isDeleted");

                    b.Property<bool>("isPercentDiscount");

                    b.Property<bool>("isPercentTax");

                    b.Property<bool>("isReturn");

                    b.Property<DateTime>("sellDate");

                    b.Property<decimal>("tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalQty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("sellId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Sell_StateId");

                    b.ToTable("Sells");
                });

            modelBuilder.Entity("Inventory.Models.Sell_Details", b =>
                {
                    b.Property<int>("sellDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<int>("SellId");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isPercentDiscount");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("sellDetailsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellId");

                    b.ToTable("Sell_Details");
                });

            modelBuilder.Entity("Inventory.Models.Sell_State", b =>
                {
                    b.Property<int>("sellStateId");

                    b.Property<string>("cssClass")
                        .HasMaxLength(50);

                    b.Property<string>("icon")
                        .HasMaxLength(50);

                    b.Property<string>("stateName")
                        .HasMaxLength(15);

                    b.HasKey("sellStateId");

                    b.ToTable("Sell_States");

                    b.HasData(
                        new
                        {
                            sellStateId = 1,
                            cssClass = "label-success",
                            icon = "icon-stack-text",
                            stateName = "New"
                        },
                        new
                        {
                            sellStateId = 2,
                            cssClass = "label-danger",
                            icon = "icon-trash",
                            stateName = "Deleted"
                        },
                        new
                        {
                            sellStateId = 3,
                            cssClass = "label-warning",
                            icon = "icon-rotate-cw2",
                            stateName = "Refunded"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Sell_State_Lang", b =>
                {
                    b.Property<int>("sellStateLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<int>("Sell_StateId");

                    b.Property<string>("stateName")
                        .HasMaxLength(50);

                    b.HasKey("sellStateLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Sell_StateId");

                    b.ToTable("Sell_State_Langs");

                    b.HasData(
                        new
                        {
                            sellStateLangId = 1,
                            LanguageId = 1,
                            Sell_StateId = 1,
                            stateName = "جديد"
                        },
                        new
                        {
                            sellStateLangId = 2,
                            LanguageId = 2,
                            Sell_StateId = 1,
                            stateName = "New"
                        },
                        new
                        {
                            sellStateLangId = 3,
                            LanguageId = 3,
                            Sell_StateId = 1,
                            stateName = "Nouveau"
                        },
                        new
                        {
                            sellStateLangId = 4,
                            LanguageId = 1,
                            Sell_StateId = 2,
                            stateName = "تم الحذف"
                        },
                        new
                        {
                            sellStateLangId = 5,
                            LanguageId = 2,
                            Sell_StateId = 2,
                            stateName = "Deleted"
                        },
                        new
                        {
                            sellStateLangId = 6,
                            LanguageId = 3,
                            Sell_StateId = 2,
                            stateName = "Suppression terminée"
                        },
                        new
                        {
                            sellStateLangId = 7,
                            LanguageId = 1,
                            Sell_StateId = 3,
                            stateName = "فاتورة مرتجع"
                        },
                        new
                        {
                            sellStateLangId = 8,
                            LanguageId = 2,
                            Sell_StateId = 3,
                            stateName = "Invoice Refunded"
                        },
                        new
                        {
                            sellStateLangId = 9,
                            LanguageId = 3,
                            Sell_StateId = 3,
                            stateName = "Facture remboursée"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Supplier", b =>
                {
                    b.Property<int>("supplierId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasMaxLength(50);

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<string>("companyName")
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.Property<string>("fax")
                        .HasMaxLength(11);

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.Property<string>("mobile")
                        .HasMaxLength(11);

                    b.Property<decimal>("openAccount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("phone")
                        .HasMaxLength(11);

                    b.Property<string>("pic")
                        .HasMaxLength(260);

                    b.Property<string>("supplierName")
                        .HasMaxLength(50);

                    b.Property<string>("website")
                        .HasMaxLength(50);

                    b.HasKey("supplierId");

                    b.HasIndex("supplierName", "isDeleted", "isActive");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Inventory.Models.Supplier_Payment", b =>
                {
                    b.Property<int>("supplierPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Payment_MethodId");

                    b.Property<int>("SupplierId");

                    b.Property<string>("comment")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.Property<DateTime>("paymentDate");

                    b.Property<decimal>("paymentValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("supplierPaymentId");

                    b.HasIndex("Payment_MethodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Supplier_Payments");
                });

            modelBuilder.Entity("Inventory.Models.Taswya", b =>
                {
                    b.Property<int>("taswyaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId");

                    b.Property<int>("ProductId");

                    b.Property<string>("discription")
                        .HasMaxLength(250);

                    b.Property<bool>("isDeleted");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("taswyaDate");

                    b.HasKey("taswyaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Taswya");
                });

            modelBuilder.Entity("Inventory.Models.Tax", b =>
                {
                    b.Property<int>("taxId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isDeleted");

                    b.Property<bool>("isPercent");

                    b.Property<decimal>("taxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("title")
                        .HasMaxLength(50);

                    b.HasKey("taxId");

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            taxId = 1,
                            isDeleted = false,
                            isPercent = true,
                            taxValue = 0m,
                            title = "0%"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Title", b =>
                {
                    b.Property<int>("titleId");

                    b.Property<string>("icon")
                        .HasMaxLength(30);

                    b.Property<string>("title")
                        .HasMaxLength(10);

                    b.HasKey("titleId");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            titleId = 1,
                            title = "Male"
                        },
                        new
                        {
                            titleId = 2,
                            title = "Female"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Title_Lang", b =>
                {
                    b.Property<int>("titleLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<int>("TitleId");

                    b.Property<string>("title")
                        .HasMaxLength(20);

                    b.HasKey("titleLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TitleId");

                    b.ToTable("Title_Langs");

                    b.HasData(
                        new
                        {
                            titleLangId = 1,
                            LanguageId = 1,
                            TitleId = 1,
                            title = "ذكر"
                        },
                        new
                        {
                            titleLangId = 2,
                            LanguageId = 2,
                            TitleId = 1,
                            title = "Male"
                        },
                        new
                        {
                            titleLangId = 3,
                            LanguageId = 3,
                            TitleId = 1,
                            title = "mâle"
                        },
                        new
                        {
                            titleLangId = 4,
                            LanguageId = 1,
                            TitleId = 2,
                            title = "أنثى"
                        },
                        new
                        {
                            titleLangId = 5,
                            LanguageId = 2,
                            TitleId = 2,
                            title = "Female"
                        },
                        new
                        {
                            titleLangId = 6,
                            LanguageId = 3,
                            TitleId = 2,
                            title = "femelle"
                        });
                });

            modelBuilder.Entity("Inventory.Models.Trans_Type", b =>
                {
                    b.Property<int>("transTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("transType")
                        .HasMaxLength(50);

                    b.HasKey("transTypeId");

                    b.ToTable("Trans_Types");
                });

            modelBuilder.Entity("Inventory.Models.Trans_Type_Lang", b =>
                {
                    b.Property<int>("transTypeLangId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId");

                    b.Property<int>("Trans_TypeId");

                    b.Property<string>("transType")
                        .HasMaxLength(50);

                    b.HasKey("transTypeLangId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Trans_TypeId");

                    b.ToTable("Trans_Type_Langs");
                });

            modelBuilder.Entity("Inventory.Models.Transfer", b =>
                {
                    b.Property<int>("transferId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocationFromlocationId");

                    b.Property<int?>("LocationTolocationId");

                    b.Property<int>("fromLocation");

                    b.Property<bool>("isDeleted");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("toLocation");

                    b.Property<DateTime>("transferDate");

                    b.HasKey("transferId");

                    b.HasIndex("LocationFromlocationId");

                    b.HasIndex("LocationTolocationId");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("Inventory.Models.Transfer_Details", b =>
                {
                    b.Property<int>("transferDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<int>("TransferId");

                    b.Property<decimal>("qty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("transferDetailsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransferId");

                    b.ToTable("Transfer_Details");
                });

            modelBuilder.Entity("Inventory.Models.UserBranch", b =>
                {
                    b.Property<int>("UserBranchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<long>("UserId");

                    b.HasKey("UserBranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBranches");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Inventory.Models.Action_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Action", "Action")
                        .WithMany("Action_Lang")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Action_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.ApplicationUser", b =>
                {
                    b.HasOne("Inventory.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.ApplicationRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inventory.Models.AuditTrial", b =>
                {
                    b.HasOne("Inventory.Models.Action", "Action")
                        .WithMany("AuditTrials")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Page", "Page")
                        .WithMany("AuditTrials")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Branch", b =>
                {
                    b.HasOne("Inventory.Models.Organization", "Organization")
                        .WithMany("Branches")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Buy", b =>
                {
                    b.HasOne("Inventory.Models.Buy_State", "Buy_State")
                        .WithMany("Buys")
                        .HasForeignKey("Buy_StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Location", "Location")
                        .WithMany("Buys")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Supplier", "Supplier")
                        .WithMany("Buys")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Buy_Details", b =>
                {
                    b.HasOne("Inventory.Models.Buy", "Buy")
                        .WithMany("Buy_Details")
                        .HasForeignKey("BuyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Product", "Product")
                        .WithMany("Buy_Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Buy_State_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Buy_State", "Buy_State")
                        .WithMany("Buy_State_Lang")
                        .HasForeignKey("Buy_StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Buy_State_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Customer", b =>
                {
                    b.HasOne("Inventory.Models.Discount", "Discount")
                        .WithMany("Customers")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Tax", "Tax")
                        .WithMany("Customers")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Title", "Title")
                        .WithMany("Customers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Customer_Payment", b =>
                {
                    b.HasOne("Inventory.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Payment_Method", "Payment_Method")
                        .WithMany("Customer_Payment")
                        .HasForeignKey("Payment_MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Expenses", b =>
                {
                    b.HasOne("Inventory.Models.Branch", "Branch")
                        .WithMany("Expenses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Expenses_Type", "Expenses_Type")
                        .WithMany("Expenses")
                        .HasForeignKey("Expenses_TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Location", b =>
                {
                    b.HasOne("Inventory.Models.Branch", "Branch")
                        .WithMany("Locations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Location_Qty", b =>
                {
                    b.HasOne("Inventory.Models.Location", "Location")
                        .WithMany("Location_Qty")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Product", "Product")
                        .WithMany("Location_Qty")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Page_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Page_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Page", "Page")
                        .WithMany("Page_Lang")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Payment_Method_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Payment_Method_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Payment_Method", "Payment_Method")
                        .WithMany("Payment_Method_Lang")
                        .HasForeignKey("Payment_MethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Product", b =>
                {
                    b.HasOne("Inventory.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Role_Action", b =>
                {
                    b.HasOne("Inventory.Models.Action", "Action")
                        .WithMany("RoleActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Page", "Page")
                        .WithMany("RoleActions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Safe", b =>
                {
                    b.HasOne("Inventory.Models.Branch", "Branch")
                        .WithMany("Safes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Safe_Trans", b =>
                {
                    b.HasOne("Inventory.Models.Safe", "Safe")
                        .WithMany("Safe_Trans")
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Trans_Type", "Trans_Type")
                        .WithMany("Safe_Trans")
                        .HasForeignKey("Trans_TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Sell", b =>
                {
                    b.HasOne("Inventory.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Location", "Location")
                        .WithMany("Sells")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Sell_State", "Sell_State")
                        .WithMany("Sells")
                        .HasForeignKey("Sell_StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Sell_Details", b =>
                {
                    b.HasOne("Inventory.Models.Product", "Product")
                        .WithMany("Sell_Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Sell", "Sell")
                        .WithMany("Sell_Details")
                        .HasForeignKey("SellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Sell_State_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Sell_State_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Sell_State", "Sell_State")
                        .WithMany("Sell_State_Lang")
                        .HasForeignKey("Sell_StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Supplier_Payment", b =>
                {
                    b.HasOne("Inventory.Models.Payment_Method", "Payment_Method")
                        .WithMany("Supplier_Payment")
                        .HasForeignKey("Payment_MethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Supplier", "Supplier")
                        .WithMany("Supplier_Payment")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Taswya", b =>
                {
                    b.HasOne("Inventory.Models.Location", "Location")
                        .WithMany("Taswyas")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Product", "Product")
                        .WithMany("Taswyas")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Title_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Title_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Title", "Title")
                        .WithMany("Title_Lang")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Trans_Type_Lang", b =>
                {
                    b.HasOne("Inventory.Models.Language", "Language")
                        .WithMany("Trans_Type_Lang")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Trans_Type", "Trans_Type")
                        .WithMany("Trans_Type_Lang")
                        .HasForeignKey("Trans_TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.Transfer", b =>
                {
                    b.HasOne("Inventory.Models.Location", "LocationFrom")
                        .WithMany("TransfersFrom")
                        .HasForeignKey("LocationFromlocationId");

                    b.HasOne("Inventory.Models.Location", "LocationTo")
                        .WithMany("TransfersTo")
                        .HasForeignKey("LocationTolocationId");
                });

            modelBuilder.Entity("Inventory.Models.Transfer_Details", b =>
                {
                    b.HasOne("Inventory.Models.Product", "Product")
                        .WithMany("Transfer_Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.Transfer", "Transfer")
                        .WithMany("Transfer_Details")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Models.UserBranch", b =>
                {
                    b.HasOne("Inventory.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.ApplicationUser", "User")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Inventory.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Inventory.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Inventory.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Inventory.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Inventory.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
